version: 1
frontend:
  phases:
    preBuild:
      commands:
        # Use literal style for consistency, although simple commands don't strictly need it
        - |
          nvm install 20
        - |
          nvm use 20
        - |
          pwd
        - |
          ls -la
        - |
          echo "Cleaning root node_modules..."
          rm -rf node_modules
        - |
          echo "Running npm ci at root..."
          npm ci
    
    build:
      commands:
        - |
          export NODE_ENV=production
        - |
          export VITE_API_URL=https://propease-backend-2-env.eba-mgfe8nm9.us-east-2.elasticbeanstalk.com
        
        # Debug: Show current directory and structure
        - |
          pwd
        - |
          ls -la
        # REMOVED: 'mkdir -p frontend' - Assuming 'frontend' directory exists in repo
        - |
          # Verify frontend directory exists (Fail early if not)
          if [ ! -d "frontend" ]; then
            echo "ERROR: 'frontend' directory not found in repository root!"
            exit 1
          fi
          echo "'frontend' directory found."
        
        # Create necessary files in frontend
        - |
          echo 'module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } };' > frontend/postcss.config.cjs
        - |
          echo "VITE_API_URL=$VITE_API_URL" > frontend/.env.production.local
        
        # Create vite.config.js file using Literal Block Scalar '|'
        - | # <<< CHANGED FROM >- TO |
          cat > frontend/vite.config.js << 'EOL'
          import { defineConfig, loadEnv } from 'vite'; # Using loadEnv for better env var handling
          import react from '@vitejs/plugin-react';
          import path from 'path';
          import { fileURLToPath } from 'url';

          const __dirname = path.dirname(fileURLToPath(import.meta.url));
          # Load .env files from the frontend directory ('production' mode)
          const env = loadEnv('production', path.resolve(__dirname), ''); 

          export default defineConfig({
            plugins: [react()],
            root: __dirname, # Set project root to frontend directory
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src'),
              },
            },
            build: {
              # Output relative to root -> frontend/build
              outDir: 'build', 
              sourcemap: false,
            },
            define: {
               # Securely pass environment variables to the client code
               'process.env.VITE_API_URL': JSON.stringify(env.VITE_API_URL)
            }
          });
          EOL # <<< ENSURE THIS LINE HAS NO LEADING/TRAILING WHITESPACE AND ALIGNS WITH 'import' ABOVE

        - | # Separate command to confirm file generation
          echo "Generated frontend/vite.config.js"
          ls -l frontend/vite.config.js # Verify file exists

        # Clean any previous build artifacts IN FRONTEND dir (run BEFORE cd frontend)
        - |
          echo "Cleaning previous build artifacts in ./frontend/ ..."
          rm -rf frontend/dist frontend/build frontend/.vite
        
        # === Navigate and Build ===
        - |
          echo "Navigating into frontend directory..."
          cd frontend
          echo "Current directory: $(pwd)"
          echo "Listing contents..."
          ls -la

        # Build step - attempt with npm run build first
        - | # Use literal block for multi-line shell command
          echo "Building frontend using 'npm run build'..."
          # Assumes frontend/package.json has "build": "vite build --mode production"
          if grep -q '"build":' package.json; then 
            npm run build
          else
            echo "WARNING: 'build' script not found in package.json. Trying direct Vite..."
            # Fallback: Use Vite directly (assuming it's in root node_modules)
             if [ -f "../node_modules/.bin/vite" ]; then
               ../node_modules/.bin/vite build --mode production
             else
               echo "Vite not found in root node_modules. Trying npx..."
               npx vite build --mode production
             fi
          fi

        # --- Verification ---
        - | # Use literal block for multi-line shell command
          echo "Verifying build output in $(pwd)..."
          ls -la # List contents of frontend dir after build
          if [ -d "build" ]; then
            echo "SUCCESS: Build directory 'build' found."
            echo "Build directory contents:"
            ls -la build
          else
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo "ERROR: Build directory 'build' NOT found in $(pwd) after build!"
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            exit 1
          fi
          
        # Removed the placeholder build creation logic - better to fail clearly.
        # Removed fallback build attempts - simplify and fix the primary method.
        
        # Final debug (optional): Show what we're deploying from root perspective
        - |
          cd .. # Go back to root
          echo "Final check of artifact directory from root:"
          ls -la frontend/build || echo "ERROR: frontend/build not found from root!"

  artifacts:
    # Path relative to repository root
    baseDirectory: frontend/build 
    files:
      - '**/*'

  cache:
    paths:
      # Cache root node_modules for monorepo
      - node_modules/**/* # Cache frontend node_modules just in case (might be empty if hoisted)
      - frontend/node_modules/**/*