{
  "openapi": "3.0.0",
  "info": {
    "title": "PropEase API",
    "version": "1.0.0",
    "description": "API documentation for PropEase property management system"
  },
  "servers": [
    {
      "url": "http://localhost:5001/api",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Owner": {
        "type": "object",
        "required": [
          "name",
          "email",
          "phone"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The auto-generated ID of the owner"
          },
          "name": {
            "type": "string",
            "description": "The owner's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The owner's email address"
          },
          "phone": {
            "type": "string",
            "description": "The owner's phone number"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the organization this owner belongs to"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the owner was created"
          },
          "created_by": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the user who created this owner"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the owner was last updated"
          },
          "updated_by": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the user who last updated this owner"
          }
        },
        "example": {
          "id": "123e4567-e89b-12d3-a456-426614174000",
          "name": "John Doe",
          "email": "john.doe@example.com",
          "phone": "+1-555-123-4567",
          "organization_id": "123e4567-e89b-12d3-a456-426614174001",
          "created_at": "2024-03-18T12:00:00Z",
          "created_by": "123e4567-e89b-12d3-a456-426614174002",
          "updated_at": "2024-03-18T12:00:00Z",
          "updated_by": "123e4567-e89b-12d3-a456-426614174002"
        }
      }
    }
  },
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with the provided information",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "first_name",
                  "last_name"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password (min 8 characters)"
                  },
                  "first_name": {
                    "type": "string",
                    "description": "User's first name"
                  },
                  "last_name": {
                    "type": "string",
                    "description": "User's last name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or email already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "summary": "Authenticate user",
        "description": "Sign in with email and password to get access token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT access token"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "organization_id": {
                          "type": "string",
                          "format": "uuid"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials"
          },
          "401": {
            "description": "Authentication failed"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/signout": {
      "post": {
        "summary": "Sign out user",
        "description": "Invalidates the user's session",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Signed out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Signed out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/user": {
      "get": {
        "summary": "Get current user",
        "description": "Returns the currently authenticated user's information",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "user_metadata": {
                      "type": "object",
                      "properties": {
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/request-access": {
      "post": {
        "summary": "Request access to the system",
        "description": "Submits a request for access to the system with organization information",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "organization_name"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "organization_name": {
                    "type": "string",
                    "description": "Name of the organization"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access request submitted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/confirm": {
      "get": {
        "summary": "Confirm email or password reset",
        "description": "Verifies a token for email confirmation or password reset",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "token_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The verification token hash"
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "signup",
                "recovery"
              ]
            },
            "description": "The type of verification"
          },
          {
            "in": "query",
            "name": "next",
            "schema": {
              "type": "string"
            },
            "description": "The URL to redirect to after verification"
          }
        ],
        "responses": {
          "303": {
            "description": "Redirects to the frontend update password page"
          },
          "400": {
            "description": "Missing parameters"
          },
          "401": {
            "description": "Invalid token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/verify-token": {
      "post": {
        "summary": "Verify token",
        "description": "Directly verifies a token without redirection",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token_hash",
                  "type"
                ],
                "properties": {
                  "token_hash": {
                    "type": "string",
                    "description": "The verification token hash"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "signup",
                      "recovery"
                    ],
                    "description": "The type of verification"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Token verified successfully"
                    },
                    "session": {
                      "type": "object",
                      "description": "User session information"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameters"
          },
          "401": {
            "description": "Invalid token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auto/{resource}": {
      "get": {
        "summary": "Get all records for a resource",
        "description": "Auto-generated endpoint to retrieve all records",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Resource name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of records"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a new record",
        "description": "Auto-generated endpoint to create a record",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Resource name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Record created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auto/{resource}/{id}": {
      "get": {
        "summary": "Get a record by ID",
        "description": "Auto-generated endpoint to retrieve a specific record",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Resource name"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Record ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Record details"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update a record",
        "description": "Auto-generated endpoint to update a specific record",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Resource name"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Record ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Record updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a record",
        "description": "Auto-generated endpoint to delete a specific record",
        "parameters": [
          {
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Resource name"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Record ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Record deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Record not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/invite/verify/{token}": {
      "get": {
        "summary": "Verify an invitation token",
        "description": "Verifies if an invitation token is valid and returns the invitation details",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The invitation token from the email link"
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation is valid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invitation is valid"
                    },
                    "invitation": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "invitation-uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "user@example.com"
                        },
                        "organization_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "org-uuid"
                        },
                        "organization_name": {
                          "type": "string",
                          "example": "Example Organization"
                        },
                        "role": {
                          "type": "string",
                          "example": "team_member"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid token format"
          },
          "404": {
            "description": "Invitation not found"
          },
          "410": {
            "description": "Invitation expired"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/invite/accept/{token}": {
      "post": {
        "summary": "Accept an invitation",
        "description": "Accepts an invitation and creates a user account",
        "tags": [
          "Invitations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The invitation token from the email link"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password",
                  "firstName",
                  "lastName"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password"
                  },
                  "firstName": {
                    "type": "string",
                    "description": "User's first name"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "User's last name"
                  },
                  "phone": {
                    "type": "string",
                    "description": "User's phone number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation accepted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invitation accepted successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "user-uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "user@example.com"
                        },
                        "first_name": {
                          "type": "string",
                          "example": "John"
                        },
                        "last_name": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "organization_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "org-uuid"
                        },
                        "role": {
                          "type": "string",
                          "example": "team_member"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or token format"
          },
          "404": {
            "description": "Invitation not found"
          },
          "410": {
            "description": "Invitation expired"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/invite/team/invite": {
      "post": {
        "summary": "Invite a team member",
        "description": "Sends an invitation to a new team member",
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the team member"
                  },
                  "jobTitle": {
                    "type": "string",
                    "description": "Job title of the team member"
                  },
                  "department": {
                    "type": "string",
                    "description": "Department of the team member"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invitation sent successfully"
                    },
                    "invitation": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "invitation-uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "newteam@example.com"
                        },
                        "expires_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-03-21T12:00:00.000Z"
                        },
                        "status": {
                          "type": "string",
                          "example": "pending"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or user already exists"
          },
          "401": {
            "description": "Unauthorized - invalid token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/invite/tenant/invite": {
      "post": {
        "summary": "Invite a tenant",
        "description": "Sends an invitation to a new tenant",
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the tenant"
                  },
                  "name": {
                    "type": "string",
                    "description": "Full name of the tenant"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Phone number of the tenant"
                  },
                  "language_preference": {
                    "type": "string",
                    "description": "Preferred language"
                  },
                  "vehicles": {
                    "type": "object",
                    "description": "Tenant's vehicles information"
                  },
                  "pets": {
                    "type": "object",
                    "description": "Tenant's pets information"
                  },
                  "emergency_contact": {
                    "type": "object",
                    "description": "Tenant's emergency contact information"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation sent successfully"
          },
          "400": {
            "description": "Invalid input or user already exists"
          },
          "401": {
            "description": "Unauthorized - invalid token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/invite/vendor/invite": {
      "post": {
        "summary": "Invite a vendor",
        "description": "Sends an invitation to a new vendor",
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the vendor"
                  },
                  "contact_name": {
                    "type": "string",
                    "description": "Contact name"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Phone number"
                  },
                  "service_type": {
                    "type": "string",
                    "description": "Type of service provided"
                  },
                  "business_type": {
                    "type": "string",
                    "description": "Type of business"
                  },
                  "service_areas": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Areas where service is provided"
                  },
                  "service_availability": {
                    "type": "object",
                    "description": "Service availability details"
                  },
                  "emergency_service": {
                    "type": "boolean",
                    "description": "Whether emergency service is available"
                  },
                  "payment_terms": {
                    "type": "string",
                    "description": "Payment terms"
                  },
                  "hourly_rate": {
                    "type": "number",
                    "description": "Hourly rate"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation sent successfully"
          },
          "400": {
            "description": "Invalid input or user already exists"
          },
          "401": {
            "description": "Unauthorized - invalid token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/invite/owner/invite": {
      "post": {
        "summary": "Invite an owner",
        "description": "Sends an invitation to a new property owner",
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the owner"
                  },
                  "name": {
                    "type": "string",
                    "description": "Full name of the owner"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Phone number"
                  },
                  "company_name": {
                    "type": "string",
                    "description": "Company name"
                  },
                  "address": {
                    "type": "string",
                    "description": "Business address"
                  },
                  "business_type": {
                    "type": "string",
                    "description": "Type of business"
                  },
                  "tax_id": {
                    "type": "string",
                    "description": "Tax ID number"
                  },
                  "payment_schedule": {
                    "type": "string",
                    "description": "Payment schedule preference"
                  },
                  "payment_method": {
                    "type": "string",
                    "description": "Preferred payment method"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Additional notes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invitation sent successfully"
          },
          "400": {
            "description": "Invalid input or user already exists"
          },
          "401": {
            "description": "Unauthorized - invalid token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/owners": {
      "get": {
        "summary": "Get all owners",
        "description": "Retrieve all owners for the current organization. Requires authentication.",
        "tags": [
          "Owners"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of owners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Owner"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Not authenticated"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Failed to fetch owners"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new owner",
        "description": "Create a new owner. Requires authentication and admin/super_admin role.",
        "tags": [
          "Owners"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name",
                  "last_name",
                  "email",
                  "phone"
                ],
                "properties": {
                  "first_name": {
                    "type": "string",
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@example.com"
                  },
                  "phone": {
                    "type": "string",
                    "example": "+1-555-123-4567"
                  },
                  "company_name": {
                    "type": "string",
                    "example": "ABC Properties"
                  },
                  "business_type": {
                    "type": "string",
                    "example": "LLC"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Owner created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Owner"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing required fields"
                    },
                    "fields": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name",
                        "email"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - user does not have required role"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/owners/{id}": {
      "get": {
        "summary": "Get owner by ID",
        "description": "Retrieve a specific owner by their ID. Requires authentication.",
        "tags": [
          "Owners"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The owner's ID"
          }
        ],
        "responses": {
          "200": {
            "description": "The owner details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Owner"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token"
          },
          "404": {
            "description": "Owner not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Owner not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update owner",
        "description": "Update an existing owner. Requires authentication and admin/super_admin role.",
        "tags": [
          "Owners"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The owner's ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Owner updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Owner"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - user does not have required role"
          },
          "404": {
            "description": "Owner not found or access denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete owner",
        "description": "Delete an existing owner. Requires authentication and admin/super_admin role.",
        "tags": [
          "Owners"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The owner's ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Owner deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Owner deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token"
          },
          "403": {
            "description": "Forbidden - user does not have required role"
          },
          "404": {
            "description": "Owner not found or access denied"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/people/tenant-record": {
      "post": {
        "summary": "Create a new tenant record without authentication",
        "description": "Creates a new tenant record in the database without creating a user profile or authentication.",
        "tags": [
          "Tenants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phone",
                  "email"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the tenant"
                  },
                  "phone": {
                    "type": "string",
                    "description": "Phone number of the tenant"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the tenant"
                  },
                  "emergency_contact_phone": {
                    "type": "string",
                    "description": "Emergency contact phone number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tenant record created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Tenant record created successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "tenant-uuid"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "phone": {
                          "type": "string",
                          "example": 1234567890
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john.doe@example.com"
                        },
                        "emergency_contact_phone": {
                          "type": "string",
                          "example": 1987654321
                        },
                        "organization_id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "org-uuid"
                        },
                        "status": {
                          "type": "string",
                          "example": "active"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-06-01T12:00:00.000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-06-01T12:00:00.000Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields or organization ID not found"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/people/{id}/documents": {
      "post": {
        "summary": "Upload documents for a person",
        "description": "Upload one or more documents for a specific person (tenant, owner, vendor, etc.)",
        "tags": [
          "Documents"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The person ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "documents": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Documents to upload (max 10)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Documents uploaded successfully"
          },
          "400": {
            "description": "Bad request - missing person ID or no files uploaded"
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/properties": {
      "get": {
        "summary": "Get all properties",
        "description": "Retrieve all properties for the current organization",
        "tags": [
          "Properties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of properties",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "title": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "address": {
                        "type": "string"
                      },
                      "price": {
                        "type": "number"
                      },
                      "bedrooms": {
                        "type": "number"
                      },
                      "bathrooms": {
                        "type": "number"
                      },
                      "square_feet": {
                        "type": "number"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "available",
                          "rented",
                          "maintenance"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "post": {
        "summary": "Create a new property",
        "description": "Create a new property in the system",
        "tags": [
          "Properties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "address"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "bedrooms": {
                    "type": "number"
                  },
                  "bathrooms": {
                    "type": "number"
                  },
                  "square_feet": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Property created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/properties/{id}": {
      "get": {
        "summary": "Get property by ID",
        "description": "Retrieve a specific property by its ID",
        "tags": [
          "Properties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Property ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Property details"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Property not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update property",
        "description": "Update an existing property",
        "tags": [
          "Properties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Property ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "price": {
                    "type": "number"
                  },
                  "bedrooms": {
                    "type": "number"
                  },
                  "bathrooms": {
                    "type": "number"
                  },
                  "square_feet": {
                    "type": "number"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "available",
                      "rented",
                      "maintenance"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Property updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Property not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Delete property",
        "description": "Delete a property from the system",
        "tags": [
          "Properties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Property ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Property deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Property not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/properties/{id}/units": {
      "get": {
        "summary": "Get property units",
        "description": "Get all units for a specific property",
        "tags": [
          "Properties"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Property ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of property units"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Property not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/rentals": {
      "post": {
        "summary": "Create a new rental property with units",
        "description": "Creates a new rental property and associated units in a single transaction",
        "tags": [
          "Rentals"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "property": {
                    "type": "object",
                    "required": [
                      "name",
                      "address",
                      "city",
                      "state",
                      "zip_code",
                      "total_units",
                      "owner_id"
                    ],
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the property"
                      },
                      "address": {
                        "type": "string",
                        "description": "Street address of the property"
                      },
                      "city": {
                        "type": "string",
                        "description": "City of the property"
                      },
                      "state": {
                        "type": "string",
                        "description": "State of the property"
                      },
                      "zip_code": {
                        "type": "string",
                        "description": "ZIP code of the property"
                      },
                      "total_units": {
                        "type": "integer",
                        "description": "Total number of units in the property"
                      },
                      "owner_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the property owner"
                      }
                    }
                  },
                  "units": {
                    "type": "array",
                    "description": "Units to add to the property",
                    "items": {
                      "type": "object",
                      "required": [
                        "unit_number",
                        "rent_amount",
                        "status"
                      ],
                      "properties": {
                        "unit_number": {
                          "type": "string",
                          "description": "Unit identifier/number"
                        },
                        "rent_amount": {
                          "type": "number",
                          "description": "Monthly rent amount"
                        },
                        "bedrooms": {
                          "type": "integer",
                          "description": "Number of bedrooms"
                        },
                        "bathrooms": {
                          "type": "number",
                          "description": "Number of bathrooms"
                        },
                        "square_feet": {
                          "type": "integer",
                          "description": "Square footage of the unit"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Available",
                            "Occupied",
                            "Maintenance",
                            "Reserved"
                          ],
                          "description": "Current occupancy status"
                        },
                        "floor_plan": {
                          "type": "string",
                          "description": "Floor plan type/name"
                        },
                        "smart_lock_enabled": {
                          "type": "boolean",
                          "description": "Whether the unit has smart locks enabled"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rental property created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "ID of the created property"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the property"
                    },
                    "units": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "unit_number": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "summary": "Get user profile",
        "description": "Retrieves the complete profile information for the authenticated user",
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "first_name": {
                      "type": "string"
                    },
                    "last_name": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "profile_image_url": {
                      "type": "string",
                      "format": "uri"
                    },
                    "organization_id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "summary": "Get current user basic info",
        "description": "Retrieves basic information about the currently authenticated user",
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "first_name": {
                      "type": "string"
                    },
                    "last_name": {
                      "type": "string"
                    },
                    "organization_id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "role": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/assign-role": {
      "post": {
        "summary": "Assign role to user",
        "description": "Assigns a role to a user within an organization",
        "tags": [
          "User Management"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "role",
                  "organizationId"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the user to assign the role to"
                  },
                  "role": {
                    "type": "string",
                    "description": "Role to assign (e.g., admin, team_member, tenant, owner, vendor)"
                  },
                  "organizationId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the organization"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Role assigned successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or missing required fields"
          },
          "401": {
            "description": "Unauthorized - invalid or expired token"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "tags": []
}